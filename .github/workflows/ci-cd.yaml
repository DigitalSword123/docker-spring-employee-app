# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

#https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-amazon-elastic-container-service

name: docker Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-south-1  
  ECR_LOGIN: 877760304415.dkr.ecr.ap-south-1.amazonaws.com                 # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: spring-boot-employee-app           # set this to your Amazon ECR repository name
  ECS_SERVICE: fargate-spring-service               # set this to your Amazon ECS service name
  ECS_CLUSTER: springEcsCluster              # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ecs_farget_task.json      # set this to the path to your Amazon ECS task definition
  ECS_TASK_NAME: springBoot                            # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: spring_employee_data_container           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

jobs:
  maven-build:
    name: Maven build
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: building jar file
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '8'

      - name: Build with Maven
        run: |
          mvn clean install
          ls -al
          cd target
          ls -al

      - name: Upload jar file as an artifact
        uses: actions/upload-artifact@v1
        with:
          name: target-artifact
          path: target/employee-jdbc-0.0.1-SNAPSHOT.jar

  deploy:
    name: Deploy
    needs: maven-build
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download artifact jar file from maven build stage
        uses: actions/download-artifact@v1
        with:
          name: target-artifact

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build, tag, and push image to Amazon ECR
        id: build-docker-image
        env:
          IMAGE_TAG: latest
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS or EC2.
          echo "printing all files"
          ls -al
          cp target-artifact/*.jar employee-jdbc-0.0.1-SNAPSHOT.jar
          echo "printing image_tag"
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $ECR_LOGIN          
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag spring-boot-employee-app:latest $ECR_LOGIN/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_LOGIN/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_LOGIN/$ECR_REPOSITORY:$IMAGE_TAG"


      - name: pull docker image from ECR and deploy in ec2
        id: deploy-docker-image
        env:
          IMAGE_TAG: latest
        run: |
          echo $(pwd)
          echo "IMAGE_TAG" 
          echo $IMAGE_TAG

          instanceList=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name $AWS_AWG_GROUP_NAME)
          echo $instanceList
          instanceIds=($(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name $AWS_AWG_GROUP_NAME | jq '.AutoScalingGroups[0].Instances' | jq -c '.[]' | grep Healthy | jq '.InstanceId' | sed -e 's/"//g'))
          echo "${instanceIds[0]} and ${instanceIds[1]}"

          dockerImageWithTag="$ECR_LOGIN/$ECR_REPOSITORY:$IMAGE_TAG"

          # pull docker image from ECR
          echo "-------------pulling docker image from ECR-------------------------"
          pullCmd="docker pull ${dockerImageWithTag}"
          echo "pull command for docker ${pullCmd}"
          instanceKeys="[{\"keys\":\"InstanceIds\",\"Values\":[\"$instanceIds\"]}]"
          echo $instanceKeys

          commands="{\"commands\":[\"#!/bin/bash\",\"eval $(aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $ECR_LOGIN)\",\"${pullCmd}\"]}"
          echo $commands

          # this executes commands in instance of ec2
          executeCmds=$(aws ssm send-command --document-name "AWS-RunSHellscript --targets "${instanceKeys}" --parameters "${commands}")
          echo $executeCmds

          # aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $ECR_LOGIN
          # docker pull ${dockerImageWithTag}


          # sleep for 1 min to download image
          date
          echo "sleep for 1 min"
          sleep 1m
          date

          # stop and remove the existing container
          # docker stop employee-spring-docker-ec2-container
          # docker rm --force employee-spring-docker-ec2-container
          cmdStopContainer="docker stop employee-spring-docker-ec2-container && docker rm --force employee-spring-docker-ec2-container"
          commands="{\"commands\":[\"#!/bin/bash\",\"${cmdStopContainer}\"]}"
          echo $commands
          executeCmds=$(aws ssm send-command --document-name "AWS-RunSHellscript --targets "${instanceKeys}" --parameters "${commands}")
          echo $executeCmds
        

          # sleep for 1 min to download image
          date
          echo "sleep for 30 seconds"
          sleep 30s
          date

          # create containers from new images
          # docker run --log-driver none -d --net=host --uts=host --restart unless-stopped --privileged --name employee-spring-docker-ec2-container -v home/ec2-user/employee/log:logs ${dockerImageWithTag}
          createContainerCmd="docker run --log-driver none -d --net=host --uts=host --restart unless-stopped --privileged --name employee-spring-docker-ec2-container -v home/ec2-user/employee/log:logs ${dockerImageWithTag}"
          commands="{\"commands\":[\"#!/bin/bash\",\"${createContainerCmd}\"]}"
          echo $commands
          executeCmds=$(aws ssm send-command --document-name "AWS-RunSHellscript --targets "${instanceKeys}" --parameters "${commands}")
          echo $executeCmds






      # - name: Fill in the new image ID in the Amazon ECS task definition
      #   id: task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
      #   with:
      #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
      #     container-name: ${{ env.CONTAINER_NAME }}
      #     image: ${{ steps.build-image.outputs.image }}

      # - name: create a new ECS cluster and service
      #   id: build-cluster
      #   run: |
      #     # aws ecs create-cluster --cluster-name $ECS_CLUSTER
      #     echo $(aws ecs list-task-definitions --family-prefix "$ECS_TASK_NAME" --status "Active") >> ActiveTaskArns.json
      #     ActiveTaskArnName=`cat ActiveTaskArns.json | jq -r '.taskDefinitionArns[0]'`
      #     IFS=', ' read -r -a arrayTask <<< "$ActiveTaskArnName"
      #     echo "active task running" 
      #     echo "${arrayTask[-1]}"
      #     # aws ecs create-service --cluster $ECS_CLUSTER --service-name $ECS_SERVICE --task-definition "${arrayTask[-1]}" --desired-count 1 --launch-type "FARGATE" --network-configuration "awsvpcConfiguration={subnets=[subnet-0b5c3b2362b48bcf2],securityGroups=[sg-0e675b3cfb27df138],assignPublicIp=ENABLED}"
      #     # aws ecs list-services --cluster $ECS_CLUSTER
      #     # aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE
      #     # aws ecs list-tasks --cluster $ECS_CLUSTER --service $ECS_SERVICE
      #     aws ecs run-task  --cluster $ECS_CLUSTER --task-definition "${arrayTask[-1]}" --launch-type="FARGATE" --network-configuration "awsvpcConfiguration={subnets=[subnet-0b5c3b2362b48bcf2],securityGroups=[sg-0e675b3cfb27df138],assignPublicIp=ENABLED}"
      
      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     service: ${{ env.ECS_SERVICE }}
      #     cluster: ${{ env.ECS_CLUSTER }}
      #     wait-for-service-stability: true